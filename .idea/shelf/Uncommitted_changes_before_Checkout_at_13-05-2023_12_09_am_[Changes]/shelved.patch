Index: tests/stringCombTest.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import unittest\r\n\r\nfrom UserNameGen.username import userNameGen\r\n\r\n\r\nclass TestUserNameGenerator(unittest.TestCase):\r\n    def test_username_generator(self):\r\n        # Create an instance of the class\r\n        generator = userNameGen(\"Joel Louis\")\r\n\r\n        # Generate the Username\r\n        username = generator.gen()\r\n\r\n        # Verify the username is a list\r\n        self.assertTrue('joellui' in username)\r\n        self.assertTrue('jlui' in username)\r\n\r\n    def test_username_secialCharactes(self):\r\n        # Create an instance of the class\r\n        generator = userNameGen(\"Joel Louis\")\r\n\r\n        # Generate the Username\r\n        username = generator.gen()\r\n\r\n        # Verify the username is a list\r\n        self.assertTrue('joel.lui' in username)\r\n        self.assertTrue('joel_lui' in username)\r\n\r\n\r\nif __name__ == '__main__':\r\n    unittest.main()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/stringCombTest.py b/tests/stringCombTest.py
--- a/tests/stringCombTest.py	(revision 7639baca7332c3100aa618d2728f5576aa218dc3)
+++ b/tests/stringCombTest.py	(date 1683885068933)
@@ -26,6 +26,17 @@
         self.assertTrue('joel.lui' in username)
         self.assertTrue('joel_lui' in username)
 
+    def test_username_secialCharactes(self):
+        # Create an instance of the class
+        generator = userNameGen("Joel Louis")
+
+        # Generate the Username
+        username = generator.gen()
+
+        # Verify the username is a list
+        self.assertTrue('joellui' in username)
+        self.assertTrue('joel_lui' in username)
+
 
 if __name__ == '__main__':
     unittest.main()
Index: UserNameGen/username.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import itertools\r\n\r\n# Creating a class for username generatior\r\n\r\n\r\nclass userNameGen:\r\n    def __init__(self, name) -> None:\r\n        self.name = name\r\n\r\n# list of all the possible combinations\r\n    def comb(self, s):\r\n        st_arr = []\r\n\r\n        for i in range(len(s)-1, -1, -1):\r\n            for j in range(len(st_arr)):\r\n                st_arr.append(s[i]+st_arr[j])\r\n            st_arr.append(s[i])\r\n        return st_arr\r\n\r\n# combining the List of strings to form username\r\n    def gen_comb(self, lists):\r\n        combinations = list(itertools.product(*lists))\r\n        res = []\r\n        for x in combinations:\r\n            res += [\"\".join(x)]\r\n            if len(x) == 2:\r\n                res += [x[0] + \".\" + x[1]]\r\n            if len(x) == 3:\r\n                res += [x[0] + \".\" + x[1] + x[2]]\r\n                res += [x[0] + x[1] + \".\" + x[2]]\r\n            if len(x) == 4:\r\n                res += [x[0] + \".\" + x[1] + x[2] + x[3]]\r\n                res += [x[0] + x[1] + \".\" + x[2] + x[3]]\r\n                res += [x[0] + x[1] + x[2] + \".\" + x[3]]\r\n        return res\r\n\r\n\r\n# Generating the username\r\n\r\n    def gen(self) -> list:\r\n        out = []\r\n        out_with_symbol = []\r\n        out_with_numbers = []\r\n        generator = []\r\n        # Converting the name to lowercase\r\n        name = self.name.lower()\r\n        name = name.split()                             # Splitting the name into a list\r\n\r\n        for i in name:\r\n            generator.append(self.comb(i))\r\n            # Adding the combinations of the name to the list (Word)\r\n            out.extend(self.comb(i))\r\n\r\n        # Adding the combinations of the name to the list (Word X Word)\r\n        out.extend(self.gen_comb(generator))\r\n\r\n        for na in out:\r\n            out_with_symbol.extend(self.generate_symbol_names(na, '_'))\r\n\r\n        for na in out_with_symbol + out:\r\n            out_with_numbers.extend(self.generate_names_with_number(na, 0, 5))\r\n\r\n        return out_with_symbol + out + out_with_numbers\r\n\r\n# Adding _\r\n    def generate_symbol_names(self, name, symbol):\r\n        merge_name = ''.join(name)\r\n        with_dashes = []\r\n        looplen = len(merge_name)\r\n        if looplen > 30:\r\n            looplen = 30\r\n        for i in range(1, 2**(min(30, looplen - 1))):\r\n            binary = bin(i)[2:].zfill(len(merge_name)-1)\r\n            combination = merge_name[0]\r\n            for j in range(len(binary)):\r\n                if binary[j] == '1':\r\n                    combination += symbol\r\n                combination += merge_name[j+1]\r\n            with_dashes.append(combination)\r\n        return with_dashes\r\n\r\n# Adding _\r\n    def generate_names_with_number(self, name, rule, max):\r\n        merge_name = ''.join(name)\r\n        with_numbers = []\r\n        looplen = len(merge_name)\r\n        if looplen > max:\r\n            looplen = max\r\n        for i in range(1, 11 ** (max + 1)):\r\n            binary = self.decimal_to_11_base(i)[2:]\r\n            combination = merge_name[0]\r\n            for j in range(len(binary)):\r\n                if binary[j] != 'A':\r\n                    combination += binary[j]\r\n                if j < len(merge_name) - 1:\r\n                    combination += merge_name[j+1]\r\n            with_numbers.append(combination)\r\n        return with_numbers\r\n\r\n# converting decimal to 11-base decimal\r\n\r\n    def decimal_to_11_base(self, decimal_num):\r\n        digits = []\r\n        while decimal_num > 0:\r\n            remainder = decimal_num % 11\r\n            digits.append(str(remainder))\r\n            decimal_num //= 11\r\n        digits.reverse()\r\n        return ''.join(digits)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/UserNameGen/username.py b/UserNameGen/username.py
--- a/UserNameGen/username.py	(revision 7639baca7332c3100aa618d2728f5576aa218dc3)
+++ b/UserNameGen/username.py	(date 1683885068944)
@@ -1,5 +1,6 @@
 import itertools
 
+
 # Creating a class for username generatior
 
 
@@ -7,17 +8,17 @@
     def __init__(self, name) -> None:
         self.name = name
 
-# list of all the possible combinations
+    # list of all the possible combinations
     def comb(self, s):
         st_arr = []
 
-        for i in range(len(s)-1, -1, -1):
+        for i in range(len(s) - 1, -1, -1):
             for j in range(len(st_arr)):
-                st_arr.append(s[i]+st_arr[j])
+                st_arr.append(s[i] + st_arr[j])
             st_arr.append(s[i])
         return st_arr
 
-# combining the List of strings to form username
+    # combining the List of strings to form username
     def gen_comb(self, lists):
         combinations = list(itertools.product(*lists))
         res = []
@@ -34,8 +35,7 @@
                 res += [x[0] + x[1] + x[2] + "." + x[3]]
         return res
 
-
-# Generating the username
+    # Generating the username
 
     def gen(self) -> list:
         out = []
@@ -44,7 +44,7 @@
         generator = []
         # Converting the name to lowercase
         name = self.name.lower()
-        name = name.split()                             # Splitting the name into a list
+        name = name.split()  # Splitting the name into a list
 
         for i in name:
             generator.append(self.comb(i))
@@ -62,24 +62,24 @@
 
         return out_with_symbol + out + out_with_numbers
 
-# Adding _
+    # Adding _
     def generate_symbol_names(self, name, symbol):
         merge_name = ''.join(name)
         with_dashes = []
         looplen = len(merge_name)
         if looplen > 30:
             looplen = 30
-        for i in range(1, 2**(min(30, looplen - 1))):
-            binary = bin(i)[2:].zfill(len(merge_name)-1)
+        for i in range(1, 2 ** (min(30, looplen - 1))):
+            binary = bin(i)[2:].zfill(len(merge_name) - 1)
             combination = merge_name[0]
             for j in range(len(binary)):
                 if binary[j] == '1':
                     combination += symbol
-                combination += merge_name[j+1]
+                combination += merge_name[j + 1]
             with_dashes.append(combination)
         return with_dashes
 
-# Adding _
+    # Adding _
     def generate_names_with_number(self, name, rule, max):
         merge_name = ''.join(name)
         with_numbers = []
@@ -93,11 +93,11 @@
                 if binary[j] != 'A':
                     combination += binary[j]
                 if j < len(merge_name) - 1:
-                    combination += merge_name[j+1]
+                    combination += merge_name[j + 1]
             with_numbers.append(combination)
         return with_numbers
 
-# converting decimal to 11-base decimal
+    # converting decimal to 11-base decimal
 
     def decimal_to_11_base(self, decimal_num):
         digits = []
Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from UserNameGen.username import userNameGen\r\n\r\ndef main(name):\r\n    test = userNameGen(name)\r\n    print(test.gen())\r\n    with open(\"output.txt\", \"w\") as f:\r\n        f.write(str(test.gen()))\r\n\r\nif __name__ == \"__main__\":\r\n    main(\"Joel Louis\")\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision 7639baca7332c3100aa618d2728f5576aa218dc3)
+++ b/main.py	(date 1683884435218)
@@ -1,10 +1,12 @@
 from UserNameGen.username import userNameGen
 
+
 def main(name):
     test = userNameGen(name)
     print(test.gen())
     with open("output.txt", "w") as f:
         f.write(str(test.gen()))
 
+
 if __name__ == "__main__":
     main("Joel Louis")
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1683873207403)
+++ b/.idea/vcs.xml	(date 1683873207403)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1683873207412)
+++ b/.idea/misc.xml	(date 1683873207412)
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.11 (trustle-search)" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
Index: .idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	(date 1683873207420)
+++ b/.idea/inspectionProfiles/profiles_settings.xml	(date 1683873207420)
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1683873207374)
+++ b/.idea/.gitignore	(date 1683873207374)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: .idea/trustle-search.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/trustle-search.iml b/.idea/trustle-search.iml
new file mode 100644
--- /dev/null	(date 1683873207385)
+++ b/.idea/trustle-search.iml	(date 1683873207385)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$">
+      <excludeFolder url="file://$MODULE_DIR$/Venv" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+  <component name="PyDocumentationSettings">
+    <option name="format" value="PLAIN" />
+    <option name="myDocStringFormat" value="Plain" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1683873207395)
+++ b/.idea/modules.xml	(date 1683873207395)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/trustle-search.iml" filepath="$PROJECT_DIR$/.idea/trustle-search.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
